buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
    }
}


plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'


version =  '1.5.6.E5'
group = 'com.elderbyte.warden'

tasks.withType(Javadoc) {
    // Avoid failing builds because of java-doc errors
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding','UTF-8')
}


bootRepackage {
    // Since this is a library, it cant be executed directly
    enabled = false // Don't create a runnable fat jar
}



compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

dependencies {

    // Spring boot
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("javax.servlet:javax.servlet-api")

    // Utilities
    compile("com.nimbusds:nimbus-jose-jwt:4.37.1")
    compile("com.github.ben-manes.caffeine:caffeine")

    // Test dependencies
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task upload {
    dependsOn bintrayUpload
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

// Publishing

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.group
            artifactId = jar.baseName

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

artifacts {
    archives sourcesJar, javadocJar
}



bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = "${jar.baseName}"
        userOrg = 'elderbyte'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/ElderByte-/warden-spring-security-jwt'

        version {
            name = project.version //Bintray logical version name
        }
    }
}

